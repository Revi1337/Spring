// DB 커넥션 풀이란?
실제 서비스 운영 환경에서는 서로 다른 장비를 이요해서 자바 프로그램과 DBMS 를 실행함
자바 프로그램에서 DBMS 로 커넥션을 생성하는 시간은 컴퓨터 입장에서 매우 길기 때문에 DB 커넥션을 생성하는 시간은 전체 성능에 영향을 줄 수 있음
또한 동시에 접속하는 사용자수가 많으면 사용자마다 DB 커넥션을 생성해서 DBMS  부하를 줌
이런 최초 연결에 따른 응답속도 저하와 동시 접속자가 많을 떄 발생하는 부하를 줄이기 위해 사용하는 것이 커넥션 풀임. 커넥션 풀은 일정 개수의 DB 커넥션을 미리 만들어주는 기법임.
DB 커넥션이 필요한 프로그램은 커넥션 풀에서 커넥션을 가져와 사용한 뒤 커넥션을 다시 풀에 반납하는 과정을 수행하기 때문에 커넥션을 사용하는 시점에서 커넥션을 생성하는 시간을 줄일 수 있음.
또한 동시 접속자가 많더라도 커넥션을 생성하는 부하가 적기 때문에 더 많은 동시 접속자를 처리할 수 있음. 커넥션도 일정 개수로 유지해서 DBMS 에 대한 부하를 일정 수준으로 유지할 수 있게 해줌.


// 트랜잭션(transaction) 이란?
두개 이상의 쿼리를 하나의 작업으로 실행해야할때 사용하는 것이 트랜잭션임
트랜잭션은 여러 쿼리를 논리적으로 하나의 작업으로 묶어주는 역할을 함. (다수의 쿼리가 실행되는데 어느시점에서 오류가 터지거나하면 앞의 작업을 취소해야함.)
즉, 묶인 쿼리중 하나라도 실패하면 전체 쿼리를 실패로 간주하고 실패 이전에 실행한 쿼리를 취소한다. 반면에 트랜잭션으로 묶인 쿼리가 성공해서
쿼리결과를 DB 에 실제로 반영하는 것을 커밋(Commit) 이라 함.
트랜잭션을 시작하면 트랜잭션을 커밋하거나 롤백할 때까지 실행한 쿼리들이 하나의 작업 단위가 되는데, JDBC 는
Connection 의 setAutoCommit(false) 를 이용해서 트랜잭션을 시작하고 commit() 과 rollback() 을 이용해서 트랜잭션을 반영(커밋)하거나
취소(rollback)함. 스프링은 @Transactional 을 이용해서 트랜잭션을 처리함.
- @Transactional 어노테이션이 제대로 동작하려면
    1. @Transactional 어노테이션 활성화 설정인 @EnableTransactionManagement 과 (Appctx 참고)
    2. Platform TransactionManager 빈 설정해야함 (Appctx 의 transactionManager() 참고)
    3. 트랜잭션범위에서 실행하고 싶은 메서드에 @Transactional 메서드를 붙이기만하면됨. (ChangePasswordService 참고)
    4. @Transactional 이 붙은 클래스를 Bean 객체로 만들어 주어야함.







